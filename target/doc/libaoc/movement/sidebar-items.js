initSidebarItems({"enum":[["Direction","An enum to represent a direction. Is great to use in maps, or when 'following' some kind of line. Also supports an init variant. When the current variant is [`init`], using [`turn_right`] returns the variant [`right`]. When the current variant is [`init`], using [`turn_left`] returns the variant [`left`]. [`turn_right`]: enum.Direction.html#method.turn_right [`turn_left`]: enum.Direction.html#method.turn_left [`init`]: enum.Direction.html#variant.Init [`right`]: enum.Direction.html#variant.Right [`left`]: enum.Direction.html#variant.Left"]],"struct":[["Position","A position. Great to use in maps or graphs. #Examples ``` extern crate libaoc; use libaoc::movement::{Position, ManhattenDst}; use libaoc::absolute::Absolute; fn main() {     let tup = (-10i32, 21i32);     let pos = Position::new(-10i32, 21i32);     assert_eq!(Position::from(tup), pos);"]],"trait":[["ManhattenDst","Returns the manhatten distance of any Position with type N. A position is either a tuple, or the struct Position. the manhatten distance is the sum of the absolute values of a coordinate."]]});