initSidebarItems({"fn":[["sort_biggest","Returns a tuple, sorted by the max value. #Examples ``` extern crate libaoc; use libaoc::{sort_biggest};"],["sort_smallest","Returns a tuple, sorted by the min value. #Examples ``` extern crate libaoc; use libaoc::{sort_smallest};"]],"macro":[["add","Adds all items in a tuple. #Examples ``` #[macro_use(add, apply)] extern crate libaoc;"],["apply","Applies any given operator to any given tuple. #Examples ``` #[macro_use(apply)] extern crate libaoc;"],["div","Divides all items in a tuple. Panics if divided by 0. #Examples ``` #[macro_use(div, apply)] extern crate libaoc;"],["mul","Multiplies all items in a tuple. #Examples ``` #[macro_use(mul, apply)] extern crate libaoc;"],["noop","This macro is used to generate `noop` functions. Works only on tuples, but is great to use in functional programming when you just need to pass a `noop` function into another function. #Examples ``` #[macro_use] extern crate libaoc; fn main() {     let f = noop!(&mut (i64, i64));     assert_eq!((10, 10), take_func(f, (10, 10)));"],["rem","'Remainders' all items in a tuple. #Examples ``` #[macro_use(rem, apply)] extern crate libaoc;"],["sub","Subtracts all items in a tuple. #Examples ``` #[macro_use(sub, apply)] extern crate libaoc;"]],"mod":[["absolute",""],["convert",""],["movement",""]],"trait":[["MinMax","2 functions to 'sort' a tuple. `minmax` returns the tuple in ascending order, `maxmin` in descending order. #Examples ``` extern crate libaoc; use libaoc::MinMax; fn main() {     let mut tup = (20, 10);     let mutborrow = &mut tup;"]]});